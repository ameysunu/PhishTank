name: Google Gemini Integration

on: [workflow_dispatch]

jobs:
  gemini_integration:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Get Commit Message
      id: commit_message
      run: |
        commit_message=$(git log -1 --pretty=%B)
        
        echo "commit_message<<EOF" >> $GITHUB_ENV
        echo "$commit_message" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV


    - name: Use Commit Message and Extracted Text
      run: |
        echo "Commit Message: $commit_message"
      env:
        commit_message: ${{ env.commit_message }}

    - name: Make Request to Gemini
      id: gemini_request
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        commit_message: ${{ env.commit_message }}
        
      run: |
        response=$(curl -s -H "Content-Type: application/json" \
        -d '{"contents":[{"parts":[{"text":"${{ vars.GEMINI_PROMPT_ACTIONS }} ${{ env.commit_message }} "}]}]}' \
        -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=$GEMINI_API_KEY")

        # Get Text from Response
        text=$(echo "$response" | jq -r '.candidates[0].content.parts[0].text')
        
        echo "extracted_text<<EOF" >> $GITHUB_ENV
        echo "$text" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
    - name: Use Gemini Response
      run: |
        echo "Response: $extracted_text"
      env:
        response: ${{ env.extracted_text }}


    - name: Trigger DMG Release WF
      uses: actions/github-script@v6
      with:
        script: |
          const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
          await octokit.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'release-dmg.yml',
            ref: 'main',
            inputs: {
              release_name: "New Release",
              release_description: process.env.extracted_text,
              release_tag: "v1.0.0"
            }
          });
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        extracted_text: ${{ env.extracted_text }}
